% Basic script that analyzes robot data
% Experiment type: by conditions (ex. speed)

% Version 1. HJH
% updated get_mvttimes to specify which velocity to use (ex. Vx, Vy, or V)

%%%### Figures have been excluded and have been commented out using '%%%###'

%clear all;
clc
close all;
global plot_graphs
plot_graphs = 0;
%% Experiment specific details
%projpath = 'C:\Users\Neuromechanics\Desktop\Megan\';
projpath = '/Users/obrienmk/Documents/NeuroLab/MATLAB/Data Analysis/';
expname = 'Mass';
addpath([projpath filesep expname filesep 'mfiles']);

subjid = 'PLA';
conditions = {'_0' '_3' '_5' '_8' '_0f'};
nc = length(conditions);
ColorSet = jet(nc);

% vthres for movement onsets, one for each speed
vthres = 0.03*ones(1,nc);

% protocol details
popts.practicetrials = 0; % # familiarization trials, without metabolic data
popts.totaltrials = 200;  % # total trials

fsR=200; tsR=1/fsR; % robot sampling frequency

ropts.rotate = 0;
ropts.switchhometar = 1;
ropts.longtrialtime_frames = 4*fsR; %4 seconds

scrsz = get(0,'ScreenSize');
color2use = {'k' 'b' 'r' 'g' 'm' 'c' 'k' 'b' 'r' 'g' 'm' 'c'};

%% Load Robot Data
%  Get robot info
[ropts.statenames, ropts.avstatenames, ropts.robotvars] = get_robotinfo(expname);

T{nc} = []; Ev{nc} = []; Data{nc} = []; MT{nc} = [];

for c = 1:nc   
    datafolder = [projpath expname filesep subjid filesep subjid '_' conditions{c}];
    cd(datafolder)
    
    % read robot .dat files
    T{c}=dataread_robot(subjid,datafolder);
    
    % Get robot events
    Ev{c} = get_robotevents(T{c}.framedata, ropts.statenames, ropts.avstatenames);
      
    % Data is structure of matrices concatenated from T.framedata
    % Then remove framedata field from T
    [Data{c}, Ev{c}] = analyze_robot_basic(T{c}, Ev{c}, ropts);
    
    % Get movement times
    Data{c}.v = (Data{c}.vx.^2+Data{c}.vy.^2).^0.5;
    MT{c} = get_mvttimes(Data{c}, Data{c}.v, Ev{c}, vthres(c));
    
    %pause
 end


figure(50);
    subplot(121);  hold on;
    for c=1:nc
        plot(c,MCost(c),'o','Color',ColorSet(c,:),'MarkerFaceColor',ColorSet(c,:))
    end
    plot(MCost,'k-')
    xlabel('Condition'); ylabel('Net Met cost (J/kg)');
    axis([0 nc+1 0 160]); 
    set(gca,'XTickLabel',[' ' conditions ' '],'FontSize',14)

%  Metabolic data by trials

%% Curve related metrics

% Write a loop for the different conditions, c, and trials, i. 
% I'm using v, where v = (vx^2+xy^2)^0.5 (see lin 118)

nTrials_speed = popts.totaltrials; % look at last X trials only
for c=1:nc
    for i=popts.totaltrials-nTrials_speed+1:popts.totaltrials
        % Average velocity
        Data{c}.avevel(i) = mean(Data{c}.v(MT{c}.idxonset(i):MT{c}.idxendpt(i),i));

        % Peak velocity
        Data{c}.peakvel(i) = max(Data{c}.v(MT{c}.idxonset(i):MT{c}.idxendpt(i),i));

        % Endpoint variability
        % Data{c}.sdvel(i) = std(Data{c}.v(MT{c}.idxonset(i):MT{c}.idxendpt(i),i));

        % Movement error

        % Smoothness??
        % Gets average movement time per trajectory and saves as
        % 'SubjIDmovttimedata'
        %%%avemovttimes

        %Gets average velocity per trajectory and saves as 'SubjIDdata'
        %%%velocityaverageTrial

        %%%distance
    end

    PrefSpeed(c)=mean(Data{c}.avevel);

end

% Average speed by condition
figure(50);
    subplot(122); hold on;
    for c=1:nc
        plot(c,PrefSpeed(c),'o','Color',ColorSet(c,:),'MarkerFaceColor',ColorSet(c,:))
    end
    plot(PrefSpeed,'k-')
    xlabel('Condition'); ylabel('Avg speed (m/s)');
    axis([0 nc+1 0.15 0.30]); 
    set(gca,'XTickLabel',[' ' conditions ' '],'FontSize',14)
    
% Energy vs. speed
figure(51);  hold on;
    for c=1:nc
         plot(PrefSpeed(c),MCost(c),'o','Color',ColorSet(c,:),'MarkerFaceColor',ColorSet(c,:))
    end
    xlabel('Speed (m/s)'); ylabel('Cost (J/kg)');
    set(gca,'FontSize',14)
